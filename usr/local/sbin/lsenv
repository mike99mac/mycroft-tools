#!/bin/bash
#
# lsenv - list many aspects of the Mycroft environment
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsenv - List the Mycroft environment" 
  echo "Usage: lsenv [OPTIONS]" 
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -v|--verbose      Increase verbosity" 
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -v|--verbose) 
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
	echo "ERROR: Too many arguments: $1"
	usage 
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function listService()
# List the status of one service 
# Arg 1: service to list
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theService=$1

  echo "Status of $theService:"
  local tempFile=/tmp/fubar
  /usr/sbin/service $theService status > $tempFile 
  local activeLine=`grep "active (running)" $tempFile 2>/dev/null`
  if [ ${#activeLine} != 0 ]; then         # found "active (running)"
    echo " -) $theService is running as a service"
    echo "$activeLine" | sed 's/^ //g'
  else
    echo " -) WARNING: Service $theService is not running ... checking for processes ..."
    local procs=`ps -ef | grep $theService | grep -v grep`
    if [ ${#procs} != 0 ]; then              # matching process
      echo "    Found matching processes:"
      echo "$procs" | sed 's/^/    /g'
    fi  
  fi	  
  /usr/bin/rm $tempFile                    # remove output file 
  echo "----------------------------------------------------------------"
 }                                         # listService()

#+--------------------------------------------------------------------------+
function doList()
# List many aspects of the Mycroft environment 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  listService mycroft
  listService emby-server 
  # need emby or jellyfin, but not both
  # listService jellyfin

  # pulseaudio does not run as a service - check for processes
  local psout
  psout=`ps -ef | grep pulseaudio  | grep -v grep`
  local numLines=`echo "$psout" | wc -l`
  echo "Status of pulseaudio:"
  if [ "$numLines" = 1 ]; then             # expected
    echo " -) pulseaudio is running as a process:"
    echo "    $psout"
  else                                     # not expected
    echo " -) WARNING: Unexpected output from ps -ef | grep pulseaudio  | grep -v grep :"
    echo $psout
  fi   
  echo "------------------------------------------------------"

  # also consicely list IP address, temperature, CPU and memory usage
  local IPaddr=`hostname -I | awk '{print $1}'` # get the IP address
  echo "IP address:  $IPaddr"
  /usr/local/sbin/lstemp | sed 's/^Raspberry Pi //g' # temp of the RasPi
  CPUusage=`grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'`
  echo -n "CPU usage:   "
  printf "%.2f" $CPUusage
  echo "%"
  echo "Memory usage:"
  free -h | sed 's/^/  /g'
 }                                         # doList()

#+--------------------------------------------------------------------------+
# Global variables"
verbose=1                                  # verbosity

# main()
parseArgs $@                                # parse arguments
doList                                      # list the requested output 

