#!/bin/bash
#
# lsenv - list many aspects of the Mycroft environment
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsenv - List the Mycroft environment" 
  echo "Usage: lsenv [OPTIONS]" 
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -v|--verbose      Increase verbosity" 
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -v|--verbose) 
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
	echo "ERROR: Too many arguments: $1"
	usage 
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function listService()
# List the status of one service 
# Arg 1: service to list
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theService=$1

  echo "Status of $theService:"
  local tempFile=/tmp/fubar
  /usr/sbin/service $theService status > $tempFile 2>/dev/null
  local activeLine=`grep "active (running)" $tempFile 2>/dev/null`
  if [ ${#activeLine} != 0 ]; then         # found "active (running)"
    echo " -) $theService is running as a service:"
    echo "$activeLine" | sed 's/^ //g'
    if [ "$theService" = pulseaudio ]; then # always show pulse processes
      echo "    pulseaudio processes:"
      ps -ef | grep $theService | grep -v grep | sed 's/^/    /g'
    fi
  else
    echo " -) WARNING: $theService is not running as a service ... checking for processes ..."
    local procs=`ps -ef | grep $theService | grep -v grep`
    if [ ${#procs} != 0 ]; then              # matching process
      echo "    Found matching $theService processes:"
      echo "$procs" | sed 's/^/    /g'
    else
      echo "    WARNING: no processes matching $theService found"  
    fi  
  fi	  
  /usr/bin/rm $tempFile                    # remove output file 
  echo $dashes 
 }                                         # listService()

#+--------------------------------------------------------------------------+
function getCPU()
# Get CPU usage for 4 seconds then average iterations 2-4 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local cpu_total=0
  for i in 1 2 3 4; do
    # Get the first line with aggregate of all CPUs 
    cpu_now=($(head -n1 /proc/stat)) 
    # Get all columns but skip the first (which is the "cpu" string) 
    cpu_sum="${cpu_now[@]:1}" 
    # Replace the column seperator (space) with + 
    cpu_sum=$((${cpu_sum// /+})) 
    # Get the delta between two reads 
    cpu_delta=$((cpu_sum - cpu_last_sum)) 
    # Get the idle time Delta 
    cpu_idle=$((cpu_now[4]- cpu_last[4])) 
    # Calc time spent working 
    cpu_used=$((cpu_delta - cpu_idle)) 
    # Calc percentage 
    cpu_usage=$((100 * cpu_used / cpu_delta)) 
    
    # Keep this as last for our next read 
    cpu_last=("${cpu_now[@]}") 
    cpu_last_sum=$cpu_sum 
    
    if [ "$i" != 1 ]; then                 # use iterations 2-4 
      let cpu_total=$cpu_total+$cpu_usage
    fi
    sleep 1 
  done
  let cpu_usage=$cpu_total/3               # calculate average
  printf "%15s : %s\n" "CPU usage" "$cpu_usage"
 }                                         # getCPU()

#+--------------------------------------------------------------------------+
function listTemp()
# lstemp - show the temperature of the Raspberry Pi based on
#          the file /sys/class/thermal/thermal_zone0/temp
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local tempFile="/sys/class/thermal/thermal_zone0/temp"
  if [ ! -f $tempFile ]; then              # file not found
    echo "ERROR: did not find $tempFile"
    exit 1
  fi
  local theTemp=`cat /sys/class/thermal/thermal_zone0/temp` # in thousdandths of degrees celcius
  let theTemp=$theTemp/1000                # convert to degrees Celcius
  let tempF=$theTemp*9/5+32                # convert to degrees Farenheit
  echo "CPU temperature : ${theTemp}C / ${tempF}F"
 }                                         # listTemp()

#+--------------------------------------------------------------------------+
function tmpfsUsage()
# Is the directory passed in using a tmpfs? 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theDir=$1
  local answer

  mount | grep $theDir | grep tmpfs >/dev/null 2>&1
  if [ $? = 0 ]; then                      # directory is using a tmpfs       
    answer=yes
  else
    answer=no
  fi
  if [ "$theDir" = ".local/state/mycroft" ]; then # make more readable
    theDir="Mycroft logs"
  fi
  printf "%15s : %s\n" "$theDir" "$answer"
 }                                         # getCPU()

#+--------------------------------------------------------------------------+
function doList()
# List many aspects of the Mycroft environment 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  clear                                    # clear the screen
  listService mycroft
# listService buttons
  listService mpd 
  listService pulseaudio 
# listService pipewire 
  
  # also list many other settings and status 
  local IPaddr=`hostname -I | awk '{print $1}'` # get the IP address
  printf "%15s : %s\n" "IP address" "$IPaddr"

  # RasPi temperature
  listTemp

  # root file system usage
  local rootUsed=`df -h / | tail -1 | awk '{print $5}'`
  printf "%15s : %s\n" "Root fs usage" "$rootUsed"

  # get CPU usage
  getCPU  

  # get memory usage
  echo "Memory usage    :"
  free -h | sed 's/^/  /g'                 # add two leading spaces

  # are log directories using tmpfs? 
  echo "tmpfs filesystem?"
  tmpfsUsage ".local/state/mycroft"
  tmpfsUsage /var/log 
  echo
 }                                         # doList()

#+--------------------------------------------------------------------------+
# Global variables"
dashes="---------------------------------------------------------------------------------"
verbose=1                                  # verbosity

# main()
parseArgs $@                                # parse arguments
doList                                      # list the requested output 

