#!/bin/bash
#
# install1 - first install script to configure a newly flashed Ubuntu Desktop 22.04
#            this will prepare it to become an OVOS/Mycroft platform
#
#+--------------------------------------------------------------------------+
function installCoreqs
# Do the work to install and configure everything to run Mycroft driven by ovos-core
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "installing co-req packages ..."
  for nextPkg in mlocate mpc mpd net-tools pandoc python3 python3-pip python3-rpi.gpio python3.10-venv; do
    runCmd sudo apt-get install -y $nextPkg
  done  
  
  echo "setting vim to better colors ..."
  grep "colorscheme desert" /etc/vim/vimrc >/dev/null 2>&1
  if [ $? != 0 ]; then                     # has not been added
    sudo sed -i -e 's/syntax on/syntax on\n  colorscheme desert/g' /etc/vim/vimrc
  fi  
  echo
  
  echo "adding groups to user pi ..."
  runCmd sudo usermod -a -G video,pulse,pulse-access,dialout,kmem pi
  echo "adding groups to user mpd ..."
  runCmd sudo usermod -a -G pulse-access,pi mpd
  echo
  
  # copy a .bash_profile from mycroft-tools
  echo "copying .bash_profile ..."
  runCmd cp ~/mycroft-tools/bash_profile ~/.bash_profile
  
  # turn default and vc4 audio off, don't disable monitor overscan
  cd /boot/firmware
  if [ ! -f config.txt.orig ]; then
    echo "customizing boot parameters ..."
    runCmd sudo cp config.txt config.txt.orig
    sudo sed -i -e 's/dtparam=audio=on/dtparam=audio=off\ndtparam=spi=off/g' \
                -e 's/^disable_overscan/# disable_overscan/g' \
                -e 's/^dtoverlay=vc4-kms-v3/# dtoverlay=vc4-kms-v3/g' config.txt
  fi  
  
  # vim - please just give me a newline
  echo "removing annoying autoindent from vim ..."
  if [ -d $HOME/.vim ]; then
    runCmd sudo mkdir $HOME/.vim 
  fi  
  cd $HOME/.vim
  echo "set noautoindent" >> vimrc
  echo "set nocindent" >> vimrc
  echo "set nosmartindent" >> vimrc
  echo "set indentexpr=" >> vimrc
  
  # rsyslog can send a flood of kernel messages
  if [ -f /etc/rsyslog.conf -a ! -f /etc/rsyslog.conf.orig ]; then 
    echo "preventing rsyslogd from making log message storms ..."
    runCmd sudo cp /etc/rsyslog.conf /etc/rsyslog.conf.orig
    sudo sed -i 's/^module(load="imklog"/# module(load="imklog"/g' /etc/rsyslog.conf
  fi
  
  # to lengthen the life of the SD card write logs to tmpfs file systems
  if [ ! -f /etc/systemd/system/var-log.mount ]; then
    echo "copying var-log.mount ..."
    runCmd sudo cp ~/mycroft-tools/var-log.mount /etc/systemd/system
    # this causes a systemd "ordering cycle"
    # echo "setting service to start at boot ..."
    # runCmd sudo systemctl enable var-log.mount
  fi
  local logDir="/home/$USER/.local/state"
  local mountFile="/etc/systemd/system/home-$USER-.local-state-mycroft.mount"
  if [ ! -d $logDir ]; then                # log dir not found
    echo "making mycroft log directory ..."
    runCmd mkdir -p $logDir 
  fi
  if [ ! -f $mountFile ]; then
    echo "copying mycroft-log.mount USER ..."
    runCmd sudo cp ~/mycroft-tools/mycroft-log.mount $mountFile
    echo "copying mycroft-log.mount USER ..."
    runCmd sudo sed -i -e "s/USER/$USER/g" $mountFile
    # this causes a systemd "ordering cycle"
    # echo "setting service to start at boot ..."
    # runCmd sudo systemctl enable $mountFile
  fi
  
  # start pulseaudio as a service
  serviceFile=/etc/systemd/system/pulseaudio.service
  if [ ! -f $serviceFile ]; then   
    echo "copying pulseaudio service file ..."
    runCmd sudo cp ~/mycroft-tools/pulseaudio.service.new /etc/systemd/system/pulseaudio.service
    echo "starting pulseaudio at boot time ..."
    runCmd sudo systemctl enable pulseaudio
  fi 

  # prevent pulseaudio from starting multiple times
  echo "copying pulseaudio.service.old to /usr/lib/systemd/user"
  runCmd sudo cp ~/mycroft-tools/pulseaudio.service.old /usr/lib/systemd/user/pulseaudio.service
  echo "copying pulseaudio.socket to /usr/lib/systemd/user"
  runCmd sudo cp ~/mycroft-tools/pulseaudio.socket /usr/lib/systemd/user

  # allow anonymous access to pulseaudio
  if [ -f /etc/pulse/system.pa -a ! -f /etc/pulse/system.pa.orig ]; then 
    echo "making backup of /etc/pulse/system.pa file ..."
    runCmd sudo cp /etc/pulse/system.pa /etc/pulse/system.pa.orig
  fi
  echo "allowing anonymous access to pulseaudio ..."
  runCmd sudo "sed -i 's/^load-module module-native-protocol-unix$/load-module module-native-protocol-unix auth-anonymous=1/g' /etc/pulse/system.pa"

  # configure mpd
  if [ -f /etc/mpd.conf -a ! -f /etc/mpd.conf.orig ]; then # no backup has been made
    echo "making backup of /etc/mpd.conf"
    runCmd sudo cp /etc/mpd.conf /etc/mpd.conf.orig # rename original
  fi
  echo "copying sample mpd.conf file to /etc"
  runCmd sudo cp ~/mycroft-tools/mpd.conf /etc # copy sample 
  echo "changing permissons of /etc/mpd.conf"
  runCmd sudo chmod 644 /etc/mpd.conf  

# mpd.log was removed from mpd.conf so this isn't needed
# if [ ! -d /var/log/mpd ]; then
#   echo "making directory /var/log/mpd ..."
#   runCmd sudo mkdir /var/log/mpd
# fi
# if [ ! -f /var/log/mpd/mpd.log ]; then
#   echo "creating file /var/log/mpd/mpd.log ..."
#   runCmd sudo touch /var/log/mpd/mpd.log
# fi
  echo "changing ownership of /var/log/mpd ..."
  runCmd sudo chown mpd.audio /var/log/mpd

  echo "setting mpd to start at boot time"
  runCmd sudo systemctl enable mpd         # start mpd at boot

  echo "turning off bluetooth ..."
  runCmd sudo systemctl disable bluetooth 
 }                                         # installCoreqs()

# main()
source installcommon                       # include common functions

date=`date`
echo "Running install1 on $date ..."

SECONDS=0                                  # reset stopwatch
installCoreqs                              # do the work

let min=$SECONDS/60
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "successfully installed co-reqs for Mycroft in $min:$sec"

