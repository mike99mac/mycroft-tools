#!/bin/bash
#
# lsintent - list and sort intent lines in files under /opt/mycroft/skills
# lsskills - list skills installed or uninstalled (symlink to lsintent)   
# lsvocab  - list and sort vocab lines in files (symlink to lsintent)   
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: $cmdCalled - List Mycroft ${object}s "
  echo "Usage: $cmdCalled [OPTIONS] [PATTERN]"
  echo "Where: PATTERN is an optional string pattern to search for"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  if [ "$cmdCalled" = lsskills ]; then 
    echo "  -a|--all          List both installed and uninstalled skills" 
  fi
  echo "  -l|--long         Long listing of $object" 
  if [ "$cmdCalled" = lsskills ]; then 
    echo "  -u|--uninstalled  Only list skills not installed" 
  fi
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  cmdCalled=`basename $0`                  # get script name called
  case "$cmdCalled" in                     # set object name by command called
    lsintent)
      object="intent"
      ;;
    lsskills)
      object="skills"
      ;;
    lsvocab)
      object="vocab"
      ;;
    *)
      echo "ERROR: unexpected cmdCalled = $cmdCalled"
      exit 3                               # internal server error
  esac
  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -a|--all)                            # valid for lsskills
        if [ "$cmdCalled" != lsskills ]; then 
	  echo "ERROR: Unrecognized flag: $1"
	  usage                            # give help
        else
          skillsType="all"
        fi
        ;;
      -l|--long)
         outputType=long 
         ;;
      -u|--uninstalled)                    # valid for lsskills
        if [ "$cmdCalled" != lsskills ]; then 
	  echo "ERROR: Unrecognized flag: $1"
	  usage                            # give help
        else
          skillsType="uninstalled"
        fi
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
	if [ ${#pattern} != 0 ]; then      # PATTERN already passed
	  echo "ERROR: Too many arguments: $1"
	  exit 4 
        else
          pattern=$1
	  skillsType="certain"
	fi   
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function listIntent()
# List intents in a short or long format 
# Args: 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

    if [ ${#pattern} = 0 ]; then           # no search pattern
      output=`grep utterance $skillsDir/*/test/intent/*.json | awk -F: '{print $3}' | sed 's/,//g' | sort`
    else
      output=`grep utterance $skillsDir/*/test/intent/*.json | awk -F: '{print $3}' | sed 's/,//g' | grep $pattern | sort`
    fi
 }                                         # listIntent()

#+--------------------------------------------------------------------------+
function listSkills()
# List skills 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local pythonVer=`python3 -V | awk '{print $2}' | awk -F. '{print $1 "." $2}'`
  local skillsDir="$VIRTUAL_ENV/lib/python$pythonVer/site-packages"
  echo "$skillsType skills:"
  ls -ld $skillsDir/skill_ovos*$pattern* 2>/dev/null | awk -F/ '{print $NF}' 
 }                                         # listSkills()

#+--------------------------------------------------------------------------+
function listVocab()
# List vocabulary 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

    if [ ${#pattern} = 0 ]; then           # no search pattern
      output=`cat $skillsDir/*/vocab/$lang/* | sort`
    else
      output=`cat $skillsDir/*/vocab/$lang/* | grep $pattern | sort`
    fi
 }                                         # listVocab()

#+--------------------------------------------------------------------------+
function doList()
# List intents or vocabs and apply optional search filter 
# Args: 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}


  if [ "$cmdCalled" = lsintent ]; then    # list utterances
    listIntent
  elif [ "$cmdCalled" = lsskills ]; then  # list skills 
    listSkills
  elif [ "$cmdCalled" = lsvocab ]; then   # list vocabulary files
    listVocab
  fi
  if [ ${#output} = 0 ]; then              # nothing found
    exit 1                                 # not successful
  else
    echo "$output"                         # display output
  fi
  exit $rc                                 # all done
 }                                         # doList()

#+--------------------------------------------------------------------------+
# Global variables"
lang="en-us"                                # language
object=""                                   # object type to be listed 
output=""                                   # the output string 
outputType="short"                          # 'short' or 'long' listing
pattern=""                                  # optional search pattern
skillsType="installed"                      # show skills 'installed', 'uninstalled', or 'all'
skillsDir="/opt/mycroft/skills"             # directory with mycroft skills

# main()
parseArgs $@                                # parse arguments
doList                                      # list the requested output 

