#!/bin/bash
#
# lsskills - list skills installed or uninstalled (symlink to lsintent)   
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsskills - List Mycroft ${object}s "
  echo "Usage: lsskills [OPTIONS] [PATTERN]"
  echo "Where: PATTERN is an optional string pattern to search for"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -a|--all          List both installed and uninstalled skills" 
  echo "  -l|--long         Long listing of $object" 
  echo "  -u|--uninstalled  Only list skills not installed" 
  echo "  -v|--verbose      Verbose output"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -a|--all)                            # valid for lsskills
        skillsType="all"
        ;;
      -l|--long)
         outputType=long 
         ;;
      -u|--uninstalled)                    # valid for lsskills
        skillsType="uninstalled"
        ;;
      -v|--verbose) 
        verbose=2 
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
	if [ ${#pattern} != 0 ]; then      # PATTERN already passed
	  echo "ERROR: Too many arguments: $1"
	  exit 4 
        else
          pattern=$1
	  skillsType="installed"
	fi   
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function verboseMsg()
# Print a message when in verbose mode
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ "$verbose" -gt 1 ]; then            # in verbose mode
   echo "$@"
  fi
 }                                         # verboseMsg()

#+--------------------------------------------------------------------------+
function listSkills()
# List skills 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local pythonVer=`python3 -V | awk '{print $2}' | awk -F. '{print $1 "." $2}'`
  local skillsDir="/home/$USER/ovos-core/venv/lib/python$pythonVer/site-packages"

  verboseMsg "$skillsType skills installed in $skillsDir:"
  local cmd="ls -ld $skillsDir/skill_ovos*$pattern* $skillsDir/ovos_skill*$pattern*"
  if [ "$outputType" = short ]; then 
    eval $cmd | grep -v dist-info | awk -F/ '{print $NF}' 
  else
    local MDfile
    local nextSkillDir
    local skillsDirs
    skillsDirs=`eval $cmd | grep -v dist-info | awk '{print $9}' | xargs` 
    for nextSkillDir in $skillsDirs; do 
      verboseMsg "checking for file: ${nextSkillDir}-*.dist-info/METADATA"
      if [ -f ${nextSkillDir}/README.md ]; then # README file not found
        MDfile="${nextSkillDir}/README.md"
      elif [ -f ${nextSkillDir}-*.dist-info/METADATA ]; then # METADATA file not found
        MDfile="${nextSkillDir}-*.dist-info/METADATA"
      else                                 # no markdown file found
        echo "WARNING: could not find metadata in $nextSkillDir"
        return
      fi
      if [ -x /usr/bin/pandoc ]; then      # format the markdown
        pandoc -t plain $MDfile
      else
        cat $MDfile
      fi 
    done
  fi
 }                                         # listSkills()

#+--------------------------------------------------------------------------+
# Global variables"
lang="en-us"                                # language
object=""                                   # object type to be listed 
output=""                                   # the output string 
outputType="short"                          # 'short' or 'long' listing
pattern=""                                  # optional search pattern
skillsType="installed"                      # show skills 'installed', 'uninstalled', or 'all'
verbose="1"                                 # verbosity level

# main()
parseArgs $@ 
listSkills 

