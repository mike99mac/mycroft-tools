#!/bin/bash
#
# install2 - clone ovos-core, create a venv and configure it to run OVOS
#
#+--------------------------------------------------------------------------+
function installPackages
# install skills and other packages with "pip install git+URL"
# Args: the URLs to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local skillURLs="$@"
  local date=`date`
  echo "Running install2.installPackages() on $date ..." 
  echo 
  local nextSkill
  for nextSkill in $skillURLs; do
    echo "installing skill $nextSkill..."
    runCmd pip install git+https://github.com/$nextSkill
  done
 }                                         # installPackages()

#+--------------------------------------------------------------------------+
function installOVOS
# Do the work to install ovos-core into a venv 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local date=`date`
  echo "Running install2.installOVOS() on $date ..." 
  echo 
  if [ -d ~/ovos-core ]; then              # ovos-core directory exists
    echo -n "~/ovos-core directory exists - do you want to remove it and re-clone? (y/n) "
    read ans
    if [ "$ans" != y -a "$ans" != Y ]; then
      exit 1
    fi
    echo "removing ~/ovos-core directory ..."
    runCmd sudo rm -fr ~/ovos-core
  fi
  
  echo "cloning ovos-core ..."
  cd                                       # cd to home directory
  runCmd git clone https://github.com/OpenVoiceOS/ovos-core
  
  echo "creating a virtual environment ..."
  runCmd cd ~/ovos-core
  runCmd python3 -m venv venv
  
  echo "activating virtual environment ..."
  runCmd source ~/ovos-core/venv/bin/activate

  echo "installing packages with apt-get ..."
  runCmd sudo apt-get install -y build-essential python3-dev swig libssl-dev libfann-dev libpulse-dev libasound2-dev mpg123 portaudio19-dev python3-pyaudio liblapack-dev libopenblas-dev flac
  
  echo "installing wheel with pip install ..."
  runCmd pip install wheel                 # wheel needs to be in place before other packages 

  echo "installing other non-ovos packages with pip install ..."
  runCmd pip install silero tornado     

  echo "installing ovos packages with pip install ..."
# runCmd pip install ovos-ocp-news-plugin ovos-stt-plugin-vosk ovos-stt-plugin-chromium ovos-vad-plugin-webrtcvad 
  installPackages OpenVoiceOS/ovos-ocp-news-plugin OpenVoiceOS/ovos-stt-plugin-vosk OpenVoiceOS/ovos-stt-plugin-chromium OpenVoiceOS/ovos-vad-plugin-webrtcvad
# installPackages mike99mac/ovos-skill-mpc-mike99mac NeonGeckoCom/skill-about NeonGeckoCom/skill-alerts NeonGeckoCom/skill-speed_test OpenVoiceOS/ovos-cli-client 
  installPackages mike99mac/ovos-skill-mpc-mike99mac OpenVoiceOS/ovos-cli-client 
  installPackages OpenVoiceOS/ovos-config OpenVoiceOS/ovos_skill_manager OpenVoiceOS/skill-ovos-date-time OpenVoiceOS/skill-ovos-fallback-unknown 
  installPackages OpenVoiceOS/skill-ovos-hello-world OpenVoiceOS/skill-ovos-naptime OpenVoiceOS/skill-ovos-news OpenVoiceOS/skill-ovos-personal 
  installPackages OpenVoiceOS/skill-ovos-stop OpenVoiceOS/skill-ovos-timer OpenVoiceOS/skill-ovos-volume OpenVoiceOS/skill-ovos-weather 
  installPackages OpenVoiceOS/skill-ovos-wikipedia OpenVoiceOS/skill-ovos-youtube-music

  echo "installing stable version of ovos-core ..."
  runCmd "pip install ovos-core[all]"


  if [ ! -f /etc/systemd/system/mycroft.service ]; then
    echo "copying mycroft.service to /etc/systemd/system ..."
    runCmd sudo cp ~/mycroft-tools/mycroft.service /etc/systemd/system
  fi
  echo "setting mycroft to start at boot time ..."
  runCmd sudo systemctl enable mycroft
  if [ ! -f /usr/local/sbin/stop-mycroft.sh ]; then
    echo "making symlink to stop-mycroft.sh ..."
    runCmd ln -s ~/ovos-core/stop-mycroft.sh /usr/local/sbin
  fi
 }                                         # installOVOS()

# main()
source installcommon                       # include common functions

SECONDS=0                                  # reset stopwatch
installOVOS                                # do the work

let min=$SECONDS/60
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "successfully installed ovos-core in $min:$sec"

